# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.objects.base_model_ import Model
from api import util


class CreateSecret200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_id=None, recovery_key=None, ttl=None):  # noqa: E501
        """CreateSecret200Response - a model defined in OpenAPI

        :param secret_id: The secret_id of this CreateSecret200Response.  # noqa: E501
        :type secret_id: str
        :param recovery_key: The recovery_key of this CreateSecret200Response.  # noqa: E501
        :type recovery_key: str
        :param ttl: The ttl of this CreateSecret200Response.  # noqa: E501
        :type ttl: int
        """
        self.openapi_types = {
            'secret_id': str,
            'recovery_key': str,
            'ttl': int
        }

        self.attribute_map = {
            'secret_id': 'secret_id',
            'recovery_key': 'recovery_key',
            'ttl': 'ttl'
        }

        self._secret_id = secret_id
        self._recovery_key = recovery_key
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt) -> 'CreateSecret200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The create_secret_200_response of this CreateSecret200Response.  # noqa: E501
        :rtype: CreateSecret200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_id(self):
        """Gets the secret_id of this CreateSecret200Response.

        Secret identification.  # noqa: E501

        :return: The secret_id of this CreateSecret200Response.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this CreateSecret200Response.

        Secret identification.  # noqa: E501

        :param secret_id: The secret_id of this CreateSecret200Response.
        :type secret_id: str
        """
        if secret_id is None:
            raise ValueError("Invalid value for `secret_id`, must not be `None`")  # noqa: E501

        self._secret_id = secret_id

    @property
    def recovery_key(self):
        """Gets the recovery_key of this CreateSecret200Response.

        Recovery key to decrypt the shared value.  # noqa: E501

        :return: The recovery_key of this CreateSecret200Response.
        :rtype: str
        """
        return self._recovery_key

    @recovery_key.setter
    def recovery_key(self, recovery_key):
        """Sets the recovery_key of this CreateSecret200Response.

        Recovery key to decrypt the shared value.  # noqa: E501

        :param recovery_key: The recovery_key of this CreateSecret200Response.
        :type recovery_key: str
        """
        if recovery_key is None:
            raise ValueError("Invalid value for `recovery_key`, must not be `None`")  # noqa: E501

        self._recovery_key = recovery_key

    @property
    def ttl(self):
        """Gets the ttl of this CreateSecret200Response.

        Time to live the secret will be available to decrypt.  # noqa: E501

        :return: The ttl of this CreateSecret200Response.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CreateSecret200Response.

        Time to live the secret will be available to decrypt.  # noqa: E501

        :param ttl: The ttl of this CreateSecret200Response.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")  # noqa: E501

        self._ttl = ttl
