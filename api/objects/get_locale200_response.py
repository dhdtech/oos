# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.objects.base_model_ import Model
from api import util


class GetLocale200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_ttl_info=None, message_secret_not_found=None, message_secret_deleted=None, page_title=None, flag_svg_icon=None):  # noqa: E501
        """GetLocale200Response - a model defined in OpenAPI

        :param message_ttl_info: The message_ttl_info of this GetLocale200Response.  # noqa: E501
        :type message_ttl_info: str
        :param message_secret_not_found: The message_secret_not_found of this GetLocale200Response.  # noqa: E501
        :type message_secret_not_found: str
        :param message_secret_deleted: The message_secret_deleted of this GetLocale200Response.  # noqa: E501
        :type message_secret_deleted: str
        :param page_title: The page_title of this GetLocale200Response.  # noqa: E501
        :type page_title: str
        :param flag_svg_icon: The flag_svg_icon of this GetLocale200Response.  # noqa: E501
        :type flag_svg_icon: str
        """
        self.openapi_types = {
            'message_ttl_info': str,
            'message_secret_not_found': str,
            'message_secret_deleted': str,
            'page_title': str,
            'flag_svg_icon': str
        }

        self.attribute_map = {
            'message_ttl_info': 'MESSAGE_TTL_INFO',
            'message_secret_not_found': 'MESSAGE_SECRET_NOT_FOUND',
            'message_secret_deleted': 'MESSAGE_SECRET_DELETED',
            'page_title': 'PAGE_TITLE',
            'flag_svg_icon': 'FLAG_SVG_ICON'
        }

        self._message_ttl_info = message_ttl_info
        self._message_secret_not_found = message_secret_not_found
        self._message_secret_deleted = message_secret_deleted
        self._page_title = page_title
        self._flag_svg_icon = flag_svg_icon

    @classmethod
    def from_dict(cls, dikt) -> 'GetLocale200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_locale_200_response of this GetLocale200Response.  # noqa: E501
        :rtype: GetLocale200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_ttl_info(self):
        """Gets the message_ttl_info of this GetLocale200Response.


        :return: The message_ttl_info of this GetLocale200Response.
        :rtype: str
        """
        return self._message_ttl_info

    @message_ttl_info.setter
    def message_ttl_info(self, message_ttl_info):
        """Sets the message_ttl_info of this GetLocale200Response.


        :param message_ttl_info: The message_ttl_info of this GetLocale200Response.
        :type message_ttl_info: str
        """
        if message_ttl_info is None:
            raise ValueError("Invalid value for `message_ttl_info`, must not be `None`")  # noqa: E501

        self._message_ttl_info = message_ttl_info

    @property
    def message_secret_not_found(self):
        """Gets the message_secret_not_found of this GetLocale200Response.


        :return: The message_secret_not_found of this GetLocale200Response.
        :rtype: str
        """
        return self._message_secret_not_found

    @message_secret_not_found.setter
    def message_secret_not_found(self, message_secret_not_found):
        """Sets the message_secret_not_found of this GetLocale200Response.


        :param message_secret_not_found: The message_secret_not_found of this GetLocale200Response.
        :type message_secret_not_found: str
        """
        if message_secret_not_found is None:
            raise ValueError("Invalid value for `message_secret_not_found`, must not be `None`")  # noqa: E501

        self._message_secret_not_found = message_secret_not_found

    @property
    def message_secret_deleted(self):
        """Gets the message_secret_deleted of this GetLocale200Response.


        :return: The message_secret_deleted of this GetLocale200Response.
        :rtype: str
        """
        return self._message_secret_deleted

    @message_secret_deleted.setter
    def message_secret_deleted(self, message_secret_deleted):
        """Sets the message_secret_deleted of this GetLocale200Response.


        :param message_secret_deleted: The message_secret_deleted of this GetLocale200Response.
        :type message_secret_deleted: str
        """
        if message_secret_deleted is None:
            raise ValueError("Invalid value for `message_secret_deleted`, must not be `None`")  # noqa: E501

        self._message_secret_deleted = message_secret_deleted

    @property
    def page_title(self):
        """Gets the page_title of this GetLocale200Response.


        :return: The page_title of this GetLocale200Response.
        :rtype: str
        """
        return self._page_title

    @page_title.setter
    def page_title(self, page_title):
        """Sets the page_title of this GetLocale200Response.


        :param page_title: The page_title of this GetLocale200Response.
        :type page_title: str
        """
        if page_title is None:
            raise ValueError("Invalid value for `page_title`, must not be `None`")  # noqa: E501

        self._page_title = page_title

    @property
    def flag_svg_icon(self):
        """Gets the flag_svg_icon of this GetLocale200Response.


        :return: The flag_svg_icon of this GetLocale200Response.
        :rtype: str
        """
        return self._flag_svg_icon

    @flag_svg_icon.setter
    def flag_svg_icon(self, flag_svg_icon):
        """Sets the flag_svg_icon of this GetLocale200Response.


        :param flag_svg_icon: The flag_svg_icon of this GetLocale200Response.
        :type flag_svg_icon: str
        """
        if flag_svg_icon is None:
            raise ValueError("Invalid value for `flag_svg_icon`, must not be `None`")  # noqa: E501

        self._flag_svg_icon = flag_svg_icon
